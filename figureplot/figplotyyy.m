function [ax12,ax3,hlines,fig] = figplotyyy(x1,y1,x2,y2,x3,y3,varargin)
% Previous version that use plotyy: figplotyyy_0.m
% [ax,ax3,~,fig{j}] = figplotyyy(t1,Fk,t2,Nx,t2,FIM,'YLabels',{'friction coefficient','Nx','FIM'},...
%   'ColorOrder',colororder,'Shift',0.05,'YScales',{'linear','log','log'});

validVec = @(x) isnumeric(x) && isequal(size(x),[1,1]);
p = inputParser;
addParameter(p,'ColorOrder',0);
addParameter(p,'YLabels',{'Y1','Y2','Y3'});
addParameter(p,'Shift',0.1,validVec);
addParameter(p,'YScales',0);
parse(p,varargin{:});
clrorder = p.Results.ColorOrder;
ylabels = p.Results.YLabels;
ShiftYAxis = [p.Results.Shift,0];% shift only in the X direction
YScales = p.Results.YScales;

if nargin < 6
   error('Not enough input arguments')
end

fig = figure('units','normalized',...
       'DefaultAxesXMinorTick','on','DefaultAxesYminorTick','on'); 

%Plot the first two lines
yyaxis left
hlines(1) = plot(x1,y1);

yyaxis right
hlines(2) = plot(x2,y2);
ax12 = gca;

if isequal(clrorder,0)
    clrorder = get(gca,'colororder');
end
thirdColor = clrorder(3,:);

for i = 1:2 % for yyaxis left and right
    ax12.YAxis(i).Color = clrorder(i,:);
    hlines(i).Color = clrorder(i,:);
end
% ax = gobjects(3);
pos = [0.1  0.1  0.7  0.8];
offset = 0; % offset = pos(3)/5.5;

%Reduce width of the two axes generated by plotyy 
pos(3) = pos(3) - offset/2;
set(ax12,'position',pos);  

%Determine the position of the third axes
pos3=[pos(1) pos(2) pos(3)+offset pos(4)];

%Determine the proper x-limits for the third axes
limx1=ax12.YAxis(1).Limits;%get(ax(1),'xlim');

% define the axes for the 3rd plot. 
ax3=axes('Position',pos3,'box','off',...
   'Color','none','XColor','k','YColor',thirdColor,...   
   'xtick',[],'xlim',limx1,'yaxislocation','right');

hlines(3) = plot(x3,y3,'Color',thirdColor);

ax3.YColor = thirdColor;


axes(ax12) % make ax(2) the current axes
% put the layer of ax(2) to the very front. (Before it is ax(3) in the very front)

ax12.Color = 'none'; % and make background color transparent otherwise ax3 cannot be seen

% Set the y-axes to log scale
if ~isequal(YScales,0)
    
    switch class(YScales)
        case 'char'
            YScales_c = cell(1,3);
            YScales_c(:) = {YScales};
        case 'cell'
            YScales_c = YScales;
        otherwise
            error('Wrong usage in setting YScale.');
    end
    ax12.YAxis(1).Scale = YScales_c{1};
    ax12.YAxis(2).Scale = YScales_c{2};
    ax3.YScale = YScales_c{3};
end


%Label all three y-axes
ax12.YAxis(1).Label.String = ylabels{1};
ax12.YAxis(2).Label.String = ylabels{2};
ax3.YLabel.String = ylabels{3};
ax3.XLim = ax12.XLim;

[ax4] = dupAx(ax3,'Shift',ShiftYAxis); % copy, shift and let the one being copied no label
ax4.YLabel = ax3.YLabel;
ax3.YTickLabel = {};
ax3.TickDir = 'out';
ax3.XTickLabel = {};

% ax3.TickLength = [0,0];
% ax3.XColor = 'none'

fig.Units = 'pixels'; % change unit back to pixels.


